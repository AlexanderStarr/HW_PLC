
% these lists are not polymorphic; they just hold nats
data list where
  nil : list
  cons : nat -> list -> list 

data nat where
  zero : nat
  suc : nat -> nat

fun one : nat
one = suc zero .

fun append : list -> list -> list 
append nil ys = ys .
append (cons x xs) ys = cons x (append xs ys) .

fun testlista : list
testlista = cons one (cons one nil) .

fun testlistb : list
testlistb = cons zero (cons zero nil) .

fun main : list
main = append testlista testlistb .