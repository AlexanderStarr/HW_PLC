---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/empty.mifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/list.mifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/nat.mifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/simpleNat.mifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/test1.mifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/test2.mifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/list1.notmifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/nat1.notmifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/nat2.notmifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/test3.notmifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/test4.notmifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/list.pmifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/nat.pmifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/simpleNat.pmifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/test1.pmifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/test2.pmifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/test2.pmifl
no points for type checking due to failing the verification test.
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/list.cmifl
output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat one() { return new suc(new zero()); } public static abstract class list { public static int nil_TAG = 1; public static int cons_TAG = 0; public abstract int getTag();} public static class nil extends list{ public int getTag() { return nil_TAG; } public nil() {} public String toString() { return "nil"; }}public static class cons extends list{ public int getTag() { return cons_TAG; }protected nat cons_data0; public cons(nat cons_data0) {this.cons_data0 = cons_data0;} public nat get_cons_data0() {return cons_data0;} public String toString() { return "(cons " + (cons_data0.toString()) + ")"; }} public static list append(list x0, list x1) { return ys; return cons(x)(append(xs)(ys)); } public static list testlista() { return cons(one)(cons(one)(nil)); } public static list testlistb() { return cons(new zero())(cons(new zero())(nil)()); } public static list main() { return append(testlista)(testlistb); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat one() { return new suc(new zero()); } public static abstract class list { public static int nil_TAG = 1; public static int cons_TAG = 0; public abstract int getTag();} public static class nil extends list{ public int getTag() { return nil_TAG; } public nil() {} public String toString() { return "nil"; }}public static class cons extends list{ public int getTag() { return cons_TAG; }protected nat cons_data0; public cons(nat cons_data0) {this.cons_data0 = cons_data0;} public nat get_cons_data0() {return cons_data0;} public String toString() { return "(cons " + (cons_data0.toString()) + ")"; }} public static list append(list x0, list x1) { return ys; return cons(x)(append(xs)(ys)); } public static list testlista() { return cons(one)(cons(one)(nil)); } public static list testlistb() { return cons(new zero())(cons(new zero())(nil)()); } public static list main() { return append(testlista)(testlistb); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat one() { return new suc(new zero()); } public static abstract class list { public static int nil_TAG = 1; public static int cons_TAG = 0; public abstract int getTag();} public static class nil extends list{ public int getTag() { return nil_TAG; } public nil() {} public String toString() { return "nil"; }}public static class cons extends list{ public int getTag() { return cons_TAG; }protected nat cons_data0; public cons(nat cons_data0) {this.cons_data0 = cons_data0;} public nat get_cons_data0() {return cons_data0;} public String toString() { return "(cons " + (cons_data0.toString()) + ")"; }} public static list append(list x0, list x1) { return ys; return cons(x)(append(xs)(ys)); } public static list testlista() { return cons(one)(cons(one)(nil)); } public static list testlistb() { return cons(new zero())(cons(new zero())(nil)()); } public static list main() { return append(testlista)(testlistb); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat one() { return new suc(new zero()); } public static abstract class list { public static int nil_TAG = 1; public static int cons_TAG = 0; public abstract int getTag();} public static class nil extends list{ public int getTag() { return nil_TAG; } public nil() {} public String toString() { return "nil"; }}public static class cons extends list{ public int getTag() { return cons_TAG; }protected nat cons_data0; public cons(nat cons_data0) {this.cons_data0 = cons_data0;} public nat get_cons_data0() {return cons_data0;} public String toString() { return "(cons " + (cons_data0.toString()) + ")"; }} public static list append(list x0, list x1) { return ys; return cons(x)(append(xs)(ys)); } public static list testlista() { return cons(one)(cons(one)(nil)); } public static list testlistb() { return cons(new zero())(cons(new zero())(nil)()); } public static list main() { return append(testlista)(testlistb); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat one() { return new suc(new zero()); } public static abstract class list { public static int nil_TAG = 1; public static int cons_TAG = 0; public abstract int getTag();} public static class nil extends list{ public int getTag() { return nil_TAG; } public nil() {} public String toString() { return "nil"; }}public static class cons extends list{ public int getTag() { return cons_TAG; }protected nat cons_data0; public cons(nat cons_data0) {this.cons_data0 = cons_data0;} public nat get_cons_data0() {return cons_data0;} public String toString() { return "(cons " + (cons_data0.toString()) + ")"; }} public static list append(list x0, list x1) { return ys; return cons(x)(append(xs)(ys)); } public static list testlista() { return cons(one)(cons(one)(nil)); } public static list testlistb() { return cons(new zero())(cons(new zero())(nil)()); } public static list main() { return append(testlista)(testlistb); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat one() { return new suc(new zero()); } public static abstract class list { public static int nil_TAG = 1; public static int cons_TAG = 0; public abstract int getTag();} public static class nil extends list{ public int getTag() { return nil_TAG; } public nil() {} public String toString() { return "nil"; }}public static class cons extends list{ public int getTag() { return cons_TAG; }protected nat cons_data0; public cons(nat cons_data0) {this.cons_data0 = cons_data0;} public nat get_cons_data0() {return cons_data0;} public String toString() { return "(cons " + (cons_data0.toString()) + ")"; }} public static list append(list x0, list x1) { return ys; return cons(x)(append(xs)(ys)); } public static list testlista() { return cons(one)(cons(one)(nil)); } public static list testlistb() { return cons(new zero())(cons(new zero())(nil)()); } public static list main() { return append(testlista)(testlistb); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat one() { return new suc(new zero()); } public static abstract class list { public static int nil_TAG = 1; public static int cons_TAG = 0; public abstract int getTag();} public static class nil extends list{ public int getTag() { return nil_TAG; } public nil() {} public String toString() { return "nil"; }}public static class cons extends list{ public int getTag() { return cons_TAG; }protected nat cons_data0; public cons(nat cons_data0) {this.cons_data0 = cons_data0;} public nat get_cons_data0() {return cons_data0;} public String toString() { return "(cons " + (cons_data0.toString()) + ")"; }} public static list append(list x0, list x1) { return ys; return cons(x)(append(xs)(ys)); } public static list testlista() { return cons(one)(cons(one)(nil)); } public static list testlistb() { return cons(new zero())(cons(new zero())(nil)()); } public static list main() { return append(testlista)(testlistb); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat one() { return new suc(new zero()); } public static abstract class list { public static int nil_TAG = 1; public static int cons_TAG = 0; public abstract int getTag();} public static class nil extends list{ public int getTag() { return nil_TAG; } public nil() {} public String toString() { return "nil"; }}public static class cons extends list{ public int getTag() { return cons_TAG; }protected nat cons_data0; public cons(nat cons_data0) {this.cons_data0 = cons_data0;} public nat get_cons_data0() {return cons_data0;} public String toString() { return "(cons " + (cons_data0.toString()) + ")"; }} public static list append(list x0, list x1) { return ys; return cons(x)(append(xs)(ys)); } public static list testlista() { return cons(one)(cons(one)(nil)); } public static list testlistb() { return cons(new zero())(cons(new zero())(nil)()); } public static list main() { return append(testlista)(testlistb); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat one() { return new suc(new zero()); } public static abstract class list { public static int nil_TAG = 1; public static int cons_TAG = 0; public abstract int getTag();} public static class nil extends list{ public int getTag() { return nil_TAG; } public nil() {} public String toString() { return "nil"; }}public static class cons extends list{ public int getTag() { return cons_TAG; }protected nat cons_data0; public cons(nat cons_data0) {this.cons_data0 = cons_data0;} public nat get_cons_data0() {return cons_data0;} public String toString() { return "(cons " + (cons_data0.toString()) + ")"; }} public static list append(list x0, list x1) { return ys; return cons(x)(append(xs)(ys)); } public static list testlista() { return cons(one)(cons(one)(nil)); } public static list testlistb() { return cons(new zero())(cons(new zero())(nil)()); } public static list main() { return append(testlista)(testlistb); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat one() { return new suc(new zero()); } public static abstract class list { public static int nil_TAG = 1; public static int cons_TAG = 0; public abstract int getTag();} public static class nil extends list{ public int getTag() { return nil_TAG; } public nil() {} public String toString() { return "nil"; }}public static class cons extends list{ public int getTag() { return cons_TAG; }protected nat cons_data0; public cons(nat cons_data0) {this.cons_data0 = cons_data0;} public nat get_cons_data0() {return cons_data0;} public String toString() { return "(cons " + (cons_data0.toString()) + ")"; }} public static list append(list x0, list x1) { return ys; return cons(x)(append(xs)(ys)); } public static list testlista() { return cons(one)(cons(one)(nil)); } public static list testlistb() { return cons(new zero())(cons(new zero())(nil)()); } public static list main() { return append(testlista)(testlistb); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat one() { return new suc(new zero()); } public static abstract class list { public static int nil_TAG = 1; public static int cons_TAG = 0; public abstract int getTag();} public static class nil extends list{ public int getTag() { return nil_TAG; } public nil() {} public String toString() { return "nil"; }}public static class cons extends list{ public int getTag() { return cons_TAG; }protected nat cons_data0; public cons(nat cons_data0) {this.cons_data0 = cons_data0;} public nat get_cons_data0() {return cons_data0;} public String toString() { return "(cons " + (cons_data0.toString()) + ")"; }} public static list append(list x0, list x1) { return ys; return cons(x)(append(xs)(ys)); } public static list testlista() { return cons(one)(cons(one)(nil)); } public static list testlistb() { return cons(new zero())(cons(new zero())(nil)()); } public static list main() { return append(testlista)(testlistb); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat one() { return new suc(new zero()); } public static abstract class list { public static int nil_TAG = 1; public static int cons_TAG = 0; public abstract int getTag();} public static class nil extends list{ public int getTag() { return nil_TAG; } public nil() {} public String toString() { return "nil"; }}public static class cons extends list{ public int getTag() { return cons_TAG; }protected nat cons_data0; public cons(nat cons_data0) {this.cons_data0 = cons_data0;} public nat get_cons_data0() {return cons_data0;} public String toString() { return "(cons " + (cons_data0.toString()) + ")"; }} public static list append(list x0, list x1) { return ys; return cons(x)(append(xs)(ys)); } public static list testlista() { return cons(one)(cons(one)(nil)); } public static list testlistb() { return cons(new zero())(cons(new zero())(nil)()); } public static list main() { return append(testlista)(testlistb); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat one() { return new suc(new zero()); } public static abstract class list { public static int nil_TAG = 1; public static int cons_TAG = 0; public abstract int getTag();} public static class nil extends list{ public int getTag() { return nil_TAG; } public nil() {} public String toString() { return "nil"; }}public static class cons extends list{ public int getTag() { return cons_TAG; }protected nat cons_data0; public cons(nat cons_data0) {this.cons_data0 = cons_data0;} public nat get_cons_data0() {return cons_data0;} public String toString() { return "(cons " + (cons_data0.toString()) + ")"; }} public static list append(list x0, list x1) { return ys; return cons(x)(append(xs)(ys)); } public static list testlista() { return cons(one)(cons(one)(nil)); } public static list testlistb() { return cons(new zero())(cons(new zero())(nil)()); } public static list main() { return append(testlista)(testlistb); } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ^
output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat one() { return new suc(new zero()); } public static abstract class list { public static int nil_TAG = 1; public static int cons_TAG = 0; public abstract int getTag();} public static class nil extends list{ public int getTag() { return nil_TAG; } public nil() {} public String toString() { return "nil"; }}public static class cons extends list{ public int getTag() { return cons_TAG; }protected nat cons_data0; public cons(nat cons_data0) {this.cons_data0 = cons_data0;} public nat get_cons_data0() {return cons_data0;} public String toString() { return "(cons " + (cons_data0.toString()) + ")"; }} public static list append(list x0, list x1) { return ys; return cons(x)(append(xs)(ys)); } public static list testlista() { return cons(one)(cons(one)(nil)); } public static list testlistb() { return cons(new zero())(cons(new zero())(nil)()); } public static list main() { return append(testlista)(testlistb); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat one() { return new suc(new zero()); } public static abstract class list { public static int nil_TAG = 1; public static int cons_TAG = 0; public abstract int getTag();} public static class nil extends list{ public int getTag() { return nil_TAG; } public nil() {} public String toString() { return "nil"; }}public static class cons extends list{ public int getTag() { return cons_TAG; }protected nat cons_data0; public cons(nat cons_data0) {this.cons_data0 = cons_data0;} public nat get_cons_data0() {return cons_data0;} public String toString() { return "(cons " + (cons_data0.toString()) + ")"; }} public static list append(list x0, list x1) { return ys; return cons(x)(append(xs)(ys)); } public static list testlista() { return cons(one)(cons(one)(nil)); } public static list testlistb() { return cons(new zero())(cons(new zero())(nil)()); } public static list main() { return append(testlista)(testlistb); } }

15 errors
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/nat.cmifl
output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ')' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^
output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ')' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ^
output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: '(' or '[' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ^
output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ')' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^
output.java:1: ')' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^
output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ')' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:1: reached end of file while parsing
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static nat add(nat x0, nat x1) { if ( == ) { assignment return y; if ( == ) { assignment return new suc(add(x)(y)); } public static nat mult(nat x0, nat x1) { if ( == ) { assignment return new zero; if ( == ) { assignment return add(y)(mult(x)(y)); } public static nat main() { return add(new suc(new zero())())(mult(new suc(new suc(new suc(new zero())())())())(new suc(new suc(new zero())())())()); } }

output.java:2: reached end of file while parsing
         
^
50 errors
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/simpleNat.cmifl
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/test1.cmifl
output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: '(' or '[' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ^
output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ^
output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: '(' or '[' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: '(' or '[' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: ')' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ^
output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: ')' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:1: reached end of file while parsing
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new suc(new zero())())())(new suc(new suc(new zero())())()); } }

output.java:2: reached end of file while parsing
         
^
41 errors
---------------------------
/Users/Bourbaki/teaching-stuffs/111-spring14-priv/grading/hw6/test2.cmifl
output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ^
output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: '(' or '[' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: '(' or '[' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^
output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: '(' or '[' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: ')' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: ')' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: not a statement
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ^
output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: illegal start of expression
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: ';' expected
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:1: reached end of file while parsing
public class output { public static abstract class nat { public static int zero_TAG = 1; public static int suc_TAG = 0; public abstract int getTag();} public static class zero extends nat{ public int getTag() { return zero_TAG; } public zero() {} public String toString() { return "zero"; }}public static class suc extends nat{ public int getTag() { return suc_TAG; }protected nat suc_data0; public suc(nat suc_data0) {this.suc_data0 = suc_data0;} public nat get_suc_data0() {return suc_data0;} public String toString() { return "(suc " + (suc_data0.toString()) + ")"; }} public static abstract class mybool { public static int ttt_TAG = 1; public static int fff_TAG = 0; public abstract int getTag();} public static class ttt extends mybool{ public int getTag() { return ttt_TAG; } public ttt() {} public String toString() { return "ttt"; }}public static class fff extends mybool{ public int getTag() { return fff_TAG; } public fff() {} public String toString() { return "fff"; }} public static mybool mycompare(nat x0, nat x1) { if ( == ) { assignment return new ttt; if ( == ) { assignment return mycompare(n)(m); if ( == ) { assignment return new fff; if ( == ) { assignment return new fff; } public static mybool main() { return mycompare(new suc(new zero())())(new suc(new suc(new zero())())()); } }

output.java:2: reached end of file while parsing
         
^
38 errors
